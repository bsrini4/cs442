package com.gui;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReportGUI.java
 *
 * Created on 07-Apr-13, AM 11:53
 */

/**
 *
 * @author srinivasan
 */

//
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Vector;
import javax.swing.ListSelectionModel;
import javax.swing.JOptionPane;
import java.util.Collections;

import com.bean.School;
import com.business.report.GenerateReport;
import com.business.update.IllinoisUpdateStrategy;
import java.util.Iterator;
import java.io.IOException;
import com.database.*;

public class ReportGUI extends javax.swing.JFrame {

    /**
	 * 
	 */
	public Map<String,String> columns;
	private static final long serialVersionUID = 1L;
	
	/** Creates new form ReportGUI */
    public ReportGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        
        /////////////
        
        //Populate Schools
        Vector<String> schoolIds= new Vector<String>();
        Vector<String> schoolNamesAndID= new Vector<String>();
        
        //get school names from database, and place them into the gui list
        Connection dbconnect= null;
		try {
			dbconnect= DatabaseConnection.getConnection();  //establish connection
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String QueryString= "SELECT * from School";
		
		try{
			Statement statement= dbconnect.createStatement();
			ResultSet rs= statement.executeQuery(QueryString);
			while(rs.next()){
				String tempCounty= rs.getString(4); //check for cook county district
				String tempSchoolType = rs.getString(5);
				if((tempCounty.equals("Cook")) && ( tempSchoolType.equals("HIGH SCHOOL"))){
					schoolIds.add(rs.getString(1));
					schoolNamesAndID.add(rs.getString(2) + " (ID#"+ (new Integer(rs.getInt(1))).toString() +")");
				}
			}

		} catch (SQLException e){
			System.out.println("Couldn't retrieve database values...");
		}
        Collections.sort(schoolNamesAndID); //sort list to make searching easier for user.
        jList1 = new javax.swing.JList(schoolNamesAndID);
        jList1.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        

        //Populate Report Parameters
        Vector<String> reportParametersList= new Vector<String>();
        
        columns = School.getMap();
        
        ArrayList<String> columnList = new ArrayList<String>(columns.values());
        
        for(int i=0;i<columnList.size();i++) {
        	reportParametersList.add(columnList.get(i));
        }
        /*reportParametersList.add("Percent Passing Overall");
        reportParametersList.add("Percent White");
        reportParametersList.add("Percent Black");*/
        
        jList2 = new javax.swing.JList(reportParametersList);
        jList2.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        
        //Populate Graph Type Box
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose Type", "Bar Graph", "Pie Chart", "Scatter Plot" }));
 
        //////////////////
        
        
        
        
        jLabel3 = new javax.swing.JLabel(); 
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("WELCOME TO SCHOOL STATISTICS");

        jLabel2.setText("Select Schools to Generate Reports: ");
        
        
        jScrollPane1.setViewportView(jList1);

        jLabel3.setText("Choose Graphical Report Type:");

        
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Other Parameters in Report:");

        jScrollPane2.setViewportView(jList2);

        jButton1.setText("Generate Report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Update Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Reset");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Exit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(jLabel1)
                .addContainerGap(206, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(61, 61, 61))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel2)
                            .addGap(21, 21, 21))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap(62, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                                .addGap(20, 20, 20))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, 269, Short.MAX_VALUE))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(94, 94, 94))
        );
        
        //Make Entire App Screen Viewable
        pack();
        setLocationRelativeTo(null);
        
        
        
    }// </editor-fold>//GEN-END:initComponents
    
    private boolean validateForm() {
    	
    	return true;
    }
// Generate Report
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        boolean okToGenerateReport= true;
       
        String idList="";
        String fieldNames="";
    	//Handle Chosen Graph Here
    	Object graphChosen= jComboBox1.getSelectedItem();
    	if(!graphChosen.equals("Choose Type")){
    		System.out.println("The Chosen Graph is: " + graphChosen);
    	}else{
 	       JOptionPane.showMessageDialog(this,
	        	    "You must pick a report type before generating a report.",
	        	    "Generate Report Error",
	        	    JOptionPane.ERROR_MESSAGE);
 	       okToGenerateReport=false;
 	       return;
    	}
    	
    	//Handle Chosen Schools Here
    	Object[] chosenSchoolsList= null;
    	chosenSchoolsList= jList1.getSelectedValues(); //get list of chosen schools
    	//parse id numbers here.  will send to report later.
    	String[] tempSchoolToken= new String[2];
    	
    	for(int x=0; x<chosenSchoolsList.length; x++){
    		tempSchoolToken= chosenSchoolsList[x].toString().split("#|\\)");
    		//System.out.println(tempSchoolToken[1] + " was a chosen school id"); //extract id number from the chosen schools in the jlist.
    		idList=idList+tempSchoolToken[1]+",";
    	}
    	System.out.println("id list "+idList);
    	if(chosenSchoolsList.length == 0){
 	       JOptionPane.showMessageDialog(this,
	        	    "You must pick at least 1 school before generating a report.",
	        	    "Generate Report Error",
	        	    JOptionPane.ERROR_MESSAGE);
	       okToGenerateReport=false;
	       return;
    	}

    	
    	
    	//Handle Chosen Parameters Here
    	Object[] chosenParametersList= null;
    	chosenParametersList= jList2.getSelectedValues();
    	
    	
    	if(((graphChosen=="Bar Graph") && (chosenParametersList.length != 0)) 
    			||((graphChosen=="Pie Chart") && (chosenParametersList.length == 1))
    			||((graphChosen=="Scatter Plot") && (chosenParametersList.length == 2))){
    		for(int x=0; x< chosenParametersList.length; x++){
    			//System.out.println("Chosen Parameter #" + x + " is: " + getKeyByValue(columns,chosenParametersList[x].toString()));
    			fieldNames=fieldNames+getKeyByValue(columns,chosenParametersList[x].toString())+",";
    		}
    		System.out.println("parameterlist is: " + fieldNames);
    	}
    	else{
    		if((graphChosen=="Bar Graph")) {
    		JOptionPane.showMessageDialog(this,
	        	    "You must pick at least 1 parameter before generating a Bar Graph report.",
	        	    "Generate Report Error",
	        	    JOptionPane.ERROR_MESSAGE);
    		} else if (graphChosen=="Pie Chart") {
    			JOptionPane.showMessageDialog(this,
    	        	    "You must pick only 1 parameter before generating a Pie Chart report.",
    	        	    "Generate Report Error",
    	        	    JOptionPane.ERROR_MESSAGE);
    		} else if (graphChosen=="Scatter Plot") {
    			JOptionPane.showMessageDialog(this,
    	        	    "You must pick only 2 parameter before generating a Scatter Plot report.",
    	        	    "Generate Report Error",
    	        	    JOptionPane.ERROR_MESSAGE);
    		}
    		
    		
 	       okToGenerateReport=false;
 	       return;
    	}
    	
    	if(okToGenerateReport){
    		//Tests have passed.  Now Generate the Report...
    		
    		System.out.println("Generating a Report...");
    		String s = fieldNames.substring(0,fieldNames.length()-1);
    		//System.out.println(s = s.substring(0, s.length() - 1));
    		GenerateReport.generate(graphChosen.toString(), idList, s);
    		System.out.println("************END OF REPORT***************");
    		
    	}
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    
//Report Type - Combo box
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        //when a graph type is chose

    }//GEN-LAST:event_jComboBox1ActionPerformed
//Update Data
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    	//Careful.  If you press it once you already have data, it will make 2 copies of data.
    	int dialogConfirm= JOptionPane.showConfirmDialog (null, "Are you sure?  Not implemented fully yet.  If you already have data in the table, you will make 2 copies","Warning",JOptionPane.YES_NO_OPTION);
    	if(dialogConfirm== JOptionPane.YES_OPTION){
    		IllinoisUpdateStrategy st = new IllinoisUpdateStrategy();
    		try {
    			Iterator<School> temp = st.getData();
    			System.out.println("Iterator done");
    			int count=1;
    			while(temp.hasNext()) {
    				System.out.println(count + ": " + temp.next().getName());
    				count++;
    			}
    		
    		} catch (IOException e) {
    			// TODO Auto-generated catch block
    			System.out.println("Cannot update schools");
    			e.printStackTrace();
    		}
    	}else{
    		System.out.println("Update Canceled");
    	}
    	
		
    }//GEN-LAST:event_jButton2ActionPerformed
    //Reset
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    	jList1.clearSelection();
    	jComboBox1.setSelectedIndex(0);
    	jList2.clearSelection();
    	
    }//GEN-LAST:event_jButton3ActionPerformed
    //Exit
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        System.out.println("Exiting App...");
    	System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
    * @param args the command line arguments
    */
    /*public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReportGUI().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    
    // End of variables declaration//GEN-END:variables
    
    public static <T, E> T getKeyByValue(Map<T, E> map, E value) {
        for (Entry<T, E> entry : map.entrySet()) {
            if (value.equals(entry.getValue())) {
                return entry.getKey();
            }
        }
        return null;
    }

}
